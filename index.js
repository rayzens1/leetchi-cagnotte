const puppeteer = require('puppeteer-extra');
const StealthPlugin = require('puppeteer-extra-plugin-stealth');
const fs = require('fs');

const url = "https://www.leetchi.com/fr/c/apolline-le-traitement-de-la-derniere-chance-2756879"; // Lien √† scraper

puppeteer.use(StealthPlugin());

async function scrapeWithPuppeteer(url) {
    console.log("üîÑ Scraping en cours...");

    const browser = await puppeteer.launch({ headless: true });
    const page = await browser.newPage();
    await page.setCacheEnabled(false);

    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');

    try {
        // Charger la page et attendre que les √©l√©ments soient pr√©sents
        await page.goto(url, { waitUntil: 'networkidle2', timeout: 60000 });

        // V√©rifier si l'√©l√©ment du montant existe avant de l'extraire
        const amountExists = await page.$('span[data-testid="MoneyPotAmount-CollectedAmount"]');
                
        if (amountExists) {
            const amount = await page.$eval('span[data-testid="MoneyPotAmount-CollectedAmount"]', el => el.textContent.trim());
            console.log("\nüí∞ Montant r√©cup√©r√©:", amount);
            fs.writeFileSync('amount.txt', amount, 'utf8');
            console.log("‚úÖ Le montant a √©t√© sauvegard√© dans amount.txt\n");
        } else {
            console.log("‚ö†Ô∏è L'√©l√©ment du montant n'a pas √©t√© trouv√© !");
        }

        // R√©cup√©rer la liste des contributions
        const contributions = await page.$$('div[data-testid="LtContribution-Item"]');

        if (contributions.length > 0) {
            // R√©cup√©rer le dernier donateur (le premier dans la liste des contributions)
            const lastContribution = contributions[0]; // Le plus r√©cent est en haut

            // Extraire le nom du donateur
            const donorExists = await lastContribution.$('p[data-testid="LtContribution-Item-Name"]');
            let lastDonor = "Inconnu";
            
            if (donorExists) {
                lastDonor = await lastContribution.$eval('p[data-testid="LtContribution-Item-Name"]', el => el.textContent.trim());
            }

            // Extraire le montant si disponible
            const amountExists = await lastContribution.$('span[data-testid="LtContribution-Item-Amount"]');
            let lastDonationAmount = "Montant non affich√©";
            
            if (amountExists) {
                lastDonationAmount = await lastContribution.$eval('span[data-testid="LtContribution-Item-Amount"]', el => el.textContent.trim());
                fs.writeFileSync('lastdonation.txt', `${lastDonationAmount}\n`, 'utf8');
            } else {
                fs.writeFileSync('lastdonation.txt', ``, 'utf8');
            }

            console.log(`üßë Dernier donateur: ${lastDonor}`);
            console.log(`üí∞ Montant du don: ${lastDonationAmount}`);

            // Sauvegarder dans lastdonator.txt et lastdonation.txt
            fs.writeFileSync('lastdonator.txt', `${lastDonor}`, 'utf8');

            console.log("‚úÖ Informations sauvegard√©es.\n");
        } else {
            console.log("‚ö†Ô∏è Aucun donateur trouv√© !");
        }

    } catch (error) {
        console.error("‚ùå Erreur lors du scraping :", error.message);
    } finally {
        await browser.close(); // Fermer le navigateur
    }
}

// Ex√©cuter le scraping toutes les 10 secondes
setInterval(() => {
    scrapeWithPuppeteer(url);
}, 30000);

// Ex√©cuter imm√©diatement au d√©marrage
scrapeWithPuppeteer(url);
